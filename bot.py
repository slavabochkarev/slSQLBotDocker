import os
import sys
import requests
from dotenv import load_dotenv
from telegram import Update, ReplyKeyboardMarkup, KeyboardButton
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, filters, ContextTypes

print(f"üîß Python version: {sys.version}")

# –ó–∞–≥—Ä—É–∂–∞–µ–º .env
load_dotenv()

BOT_TOKEN = os.getenv("BOT_TOKEN")
SUPABASE_URL = os.getenv("SUPABASE_URL")
SUPABASE_KEY = os.getenv("SUPABASE_KEY")

if not BOT_TOKEN or not SUPABASE_URL or not SUPABASE_KEY:
    raise ValueError("‚ùå BOT_TOKEN, SUPABASE_URL –∏–ª–∏ SUPABASE_KEY –Ω–µ –∑–∞–¥–∞–Ω—ã –≤ .env")

# –û–±—â–∏–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏ –¥–ª—è Supabase API
HEADERS = {
    "apikey": SUPABASE_KEY,
    "Authorization": f"Bearer {SUPABASE_KEY}",
    "Content-Type": "application/json"
}

# ====== API —Ñ—É–Ω–∫—Ü–∏–∏ ======

def save_user_info(user, chat_id):
    url = f"{SUPABASE_URL}/rest/v1/users"
    payload = {
        "user_id": user.id,
        "username": user.username,
        "first_name": user.first_name,
        "last_name": user.last_name,
        "language_code": user.language_code,
        "is_premium": getattr(user, "is_premium", False),
        "chat_id": chat_id
    }
    try:
        resp = requests.post(url, json=payload, headers=HEADERS)
        resp.raise_for_status()
        print("‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ—Ö—Ä–∞–Ω—ë–Ω –≤ Supabase")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")

def save_location(user_id, latitude, longitude, address):
    url = f"{SUPABASE_URL}/rest/v1/locations"
    payload = {
        "user_id": user_id,
        "latitude": latitude,
        "longitude": longitude,
        "address": address
    }
    try:
        resp = requests.post(url, json=payload, headers=HEADERS)
        resp.raise_for_status()
        print("üìç –ì–µ–æ–ª–æ–∫–∞—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ Supabase")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏: {e}")

def save_message(user_id, text):
    url = f"{SUPABASE_URL}/rest/v1/activity_log"
    payload = {
        "user_id": user_id,
        "message": text
    }
    try:
        resp = requests.post(url, json=payload, headers=HEADERS)
        resp.raise_for_status()
        print("üí¨ –°–æ–æ–±—â–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ Supabase")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

# –ì–µ–æ–∫–æ–¥–µ—Ä —á–µ—Ä–µ–∑ OpenStreetMap
def get_address_from_coords(lat, lon):
    try:
        url = "https://nominatim.openstreetmap.org/reverse"
        params = {
            "format": "json",
            "lat": lat,
            "lon": lon,
            "zoom": 18,
            "addressdetails": 1
        }
        headers = {"User-Agent": "telegram-bot-demo"}
        resp = requests.get(url, params=params, headers=headers)
        if resp.status_code == 200:
            return resp.json().get("display_name", "–ê–¥—Ä–µ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω")
        else:
            return "–û—à–∏–±–∫–∞ –≥–µ–æ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è"
    except Exception as e:
        return f"–û—à–∏–±–∫–∞: {e}"

# ====== Telegram Handlers ======

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    chat = update.effective_chat

    save_user_info(user, chat.id)

    location_button = KeyboardButton("üìç –û—Ç–ø—Ä–∞–≤–∏—Ç—å –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é", request_location=True)
    location_keyboard = ReplyKeyboardMarkup([[location_button]], resize_keyboard=True)

    text = (
        f"üë§ <b>–í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ:</b>\n\n"
        f"üÜî ID: <code>{user.id}</code>\n"
        f"üìõ –ò–º—è: {user.first_name or '-'}\n"
        f"üë™ –§–∞–º–∏–ª–∏—è: {user.last_name or '-'}\n"
        f"üîó Username: @{user.username or '-'}\n"
        f"üåê –Ø–∑—ã–∫: {user.language_code or '-'}\n"
        f"üíé Premium: {'–î–∞' if getattr(user, 'is_premium', False) else '–ù–µ—Ç'}\n"
        f"üí¨ Chat ID: {chat.id}\n\n"
        f"üìç –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–≤–æ—é –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é üëá"
    )

    await update.message.reply_text(
        text=text,
        parse_mode="HTML",
        reply_markup=location_keyboard
    )

async def location_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    location = update.message.location
    user = update.effective_user

    address = get_address_from_coords(location.latitude, location.longitude)
    save_location(user.id, location.latitude, location.longitude, address)

    await update.message.reply_text(
        f"üìç –°–ø–∞—Å–∏–±–æ, {user.first_name}!\n"
        f"üß≠ –®–∏—Ä–æ—Ç–∞: <code>{location.latitude}</code>\n"
        f"üß≠ –î–æ–ª–≥–æ—Ç–∞: <code>{location.longitude}</code>\n"
        f"üè† –ê–¥—Ä–µ—Å: <i>{address}</i>",
        parse_mode="HTML"
    )

async def echo(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    text = update.message.text
    save_message(user.id, text)
    await update.message.reply_text(f"–í—ã —Å–∫–∞–∑–∞–ª–∏: {text}")

# ====== –ó–∞–ø—É—Å–∫ ======
if __name__ == "__main__":
    app = ApplicationBuilder().token(BOT_TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(MessageHandler(filters.LOCATION, location_handler))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, echo))

    print("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    app.run_polling()
