import os
import sys
import requests
from dotenv import load_dotenv
from telegram import Update, ReplyKeyboardMarkup, KeyboardButton
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, filters, ContextTypes

print(f"üîß Python version: {sys.version}")

# –ó–∞–≥—Ä—É–∂–∞–µ–º .env
load_dotenv()

BOT_TOKEN = os.getenv("BOT_TOKEN")
SUPABASE_URL = os.getenv("SUPABASE_URL")
SUPABASE_KEY = os.getenv("SUPABASE_KEY")

HEADERS = {
    "apikey": SUPABASE_KEY,
    "Authorization": f"Bearer {SUPABASE_KEY}",
    "Content-Type": "application/json"
}

# ======= REST-–∑–∞–ø—Ä–æ—Å—ã =======
def save_user_info(user):
    try:
        url = f"{SUPABASE_URL}/rest/v1/users"
        data = {
            "id": user.id,
            "first_name": user.first_name,
            "last_name": user.last_name,
            "username": user.username,
            "language_code": user.language_code,
            "is_premium": getattr(user, "is_premium", False)
        }
        r = requests.post(url, headers=HEADERS, json=data)
        r.raise_for_status()
        print("‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ—Ö—Ä–∞–Ω—ë–Ω –≤ –±–∞–∑–µ.")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")

def save_location(user_id, latitude, longitude, address):
    try:
        url = f"{SUPABASE_URL}/rest/v1/locations"
        data = {
            "user_id": user_id,
            "latitude": latitude,
            "longitude": longitude,
            "address": address
        }
        r = requests.post(url, headers=HEADERS, json=data, params={"return": "minimal"})
        r.raise_for_status()
        print("üìç –ì–µ–æ–ª–æ–∫–∞—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞.")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏: {e}")

def save_activity(user_id, action):
    try:
        url = f"{SUPABASE_URL}/rest/v1/activity_log"
        data = {
            "user_id": user_id,
            "action": action
        }
        r = requests.post(url, headers=HEADERS, json=data, params={"return": "minimal"})
        r.raise_for_status()
        print("üí¨ –î–µ–π—Å—Ç–≤–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ.")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–µ–π—Å—Ç–≤–∏—è: {e}")
        
# ======= –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è =======
def get_address_from_coords(lat, lon):
    try:
        url = "https://nominatim.openstreetmap.org/reverse"
        params = {
            "format": "json",
            "lat": lat,
            "lon": lon,
            "zoom": 18,
            "addressdetails": 1
        }
        headers = {"User-Agent": "telegram-bot-demo"}
        response = requests.get(url, params=params, headers=headers)
        if response.status_code == 200:
            return response.json().get("display_name", "–ê–¥—Ä–µ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω")
        else:
            return "–û—à–∏–±–∫–∞ –≥–µ–æ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è"
    except Exception as e:
        return f"–û—à–∏–±–∫–∞: {e}"

# ======= –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ =======
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    chat = update.effective_chat

    save_user_info(user)
    save_activity(user.id, "start command")

    location_button = KeyboardButton("üìç –û—Ç–ø—Ä–∞–≤–∏—Ç—å –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é", request_location=True)
    location_keyboard = ReplyKeyboardMarkup([[location_button]], resize_keyboard=True)

    text = (
        f"üë§ <b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–∞—Å:</b>\n\n"
        f"üÜî ID: <code>{user.id}</code>\n"
        f"üìõ –ò–º—è: {user.first_name or '-'}\n"
        f"üë™ –§–∞–º–∏–ª–∏—è: {user.last_name or '-'}\n"
        f"üîó Username: @{user.username or '-'}\n"
        f"üåê –Ø–∑—ã–∫: {user.language_code or '-'}\n"
        f"üíé Premium: {'–î–∞' if getattr(user, 'is_premium', False) else '–ù–µ—Ç'}\n"
    )

    await update.message.reply_text(
        text=text,
        parse_mode="HTML",
        reply_markup=location_keyboard
    )

async def location_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    location = update.message.location
    user = update.effective_user

    latitude = location.latitude
    longitude = location.longitude

    address = get_address_from_coords(latitude, longitude)
    save_location(user.id, latitude, longitude, address)
    save_activity(user.id, "sent location")

    await update.message.reply_text(
        f"üìç –°–ø–∞—Å–∏–±–æ, {user.first_name}!\n"
        f"üß≠ –®–∏—Ä–æ—Ç–∞: <code>{latitude}</code>\n"
        f"üß≠ –î–æ–ª–≥–æ—Ç–∞: <code>{longitude}</code>\n"
        f"üè† –ê–¥—Ä–µ—Å: <i>{address}</i>",
        parse_mode="HTML"
    )

async def echo(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    message = update.message.text
    save_activity(user.id, f"message: {message}")
    await update.message.reply_text(f"–í—ã —Å–∫–∞–∑–∞–ª–∏: {message}")

# ======= –ó–∞–ø—É—Å–∫ =======
if __name__ == "__main__":
    app = ApplicationBuilder().token(BOT_TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(MessageHandler(filters.LOCATION, location_handler))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, echo))
    print("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    app.run_polling()
